#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('🔧 Merkel View Setup Script');
console.log('==========================\n');

const questions = [
  {
    key: 'firebase.apiKey',
    prompt: 'Enter your Firebase API Key: ',
    required: true
  },
  {
    key: 'firebase.authDomain',
    prompt: 'Enter your Firebase Auth Domain (e.g., your-project.firebaseapp.com): ',
    required: true
  },
  {
    key: 'firebase.projectId',
    prompt: 'Enter your Firebase Project ID: ',
    required: true
  },
  {
    key: 'firebase.storageBucket',
    prompt: 'Enter your Firebase Storage Bucket (e.g., your-project.appspot.com): ',
    required: true
  },
  {
    key: 'firebase.messagingSenderId',
    prompt: 'Enter your Firebase Messaging Sender ID: ',
    required: true
  },
  {
    key: 'firebase.appId',
    prompt: 'Enter your Firebase App ID: ',
    required: true
  },
  {
    key: 'googleMaps.apiKey',
    prompt: 'Enter your Google Maps API Key: ',
    required: true
  }
];

async function askQuestion(question) {
  return new Promise((resolve) => {
    rl.question(question.prompt, (answer) => {
      if (question.required && !answer.trim()) {
        console.log('❌ This field is required. Please try again.');
        resolve(askQuestion(question));
      } else {
        resolve(answer.trim());
      }
    });
  });
}

function setValue(obj, path, value) {
  const keys = path.split('.');
  let current = obj;
  
  for (let i = 0; i < keys.length - 1; i++) {
    if (!current[keys[i]]) {
      current[keys[i]] = {};
    }
    current = current[keys[i]];
  }
  
  current[keys[keys.length - 1]] = value;
}

async function main() {
  const config = {
    development: {
      firebase: {},
      googleMaps: {}
    },
    production: {
      firebase: {},
      googleMaps: {}
    }
  };

  console.log('Please provide your Firebase and Google Maps configuration:');
  console.log('(You can find these in your Firebase Console and Google Cloud Console)\n');

  // Collect answers
  const answers = {};
  for (const question of questions) {
    const answer = await askQuestion(question);
    answers[question.key] = answer;
  }

  // Apply to both development and production
  for (const [key, value] of Object.entries(answers)) {
    setValue(config.development, key, value);
    setValue(config.production, key, value);
  }

  // Generate config file
  const configContent = `// config.js - Environment Configuration
// Generated by setup script on ${new Date().toISOString()}

const Config = ${JSON.stringify(config, null, 2)};

// Detect environment
const getEnvironment = () => {
    if (typeof process !== 'undefined' && process.env.NODE_ENV) {
        return process.env.NODE_ENV;
    }
    
    // Check if running on GitHub Pages
    if (window.location.hostname.includes('github.io')) {
        return 'production';
    }
    
    // Check if localhost
    if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
        return 'development';
    }
    
    // Default to production
    return 'production';
};

// Get current configuration
const getCurrentConfig = () => {
    const env = getEnvironment();
    console.log(\`🌍 Environment: \${env}\`);
    return Config[env] || Config.production;
};

// Export for use in other files
window.AppConfig = getCurrentConfig();
window.Environment = getEnvironment();

console.log('📋 Configuration loaded:', window.Environment);`;

  // Write config file
  fs.writeFileSync('config.js', configContent);

  console.log('\n✅ Configuration complete!');
  console.log('📁 Created: config.js');
  console.log('\n🚀 Next steps:');
  console.log('1. Run: npm start');
  console.log('2. Open: http://localhost:3000');
  console.log('3. Test your configuration');
  console.log('\n📚 For deployment instructions, see: README.md');

  rl.close();
}

if (require.main === module) {
  main().catch(console.error);
}
